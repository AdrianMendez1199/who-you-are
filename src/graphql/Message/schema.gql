type Message {
 id: ID!
 message: String!
 to: ID!
}

type Query {
    getMessages(userId: ID!): [SendMessagePayload!]!
}

type Mutation {
    sendMessage(data: SendMessageInput!): Message!
}

input SendMessageInput {
 to: ID!
 message: String 
 sentBy: ID!
}

type Subscription {
    newMessage(id: ID!): newMessagePayload!
}

scalar Date

type newMessagePayload {
 data: SendMessagePayload!
}

type SendMessagePayload {
  _id: ID,
  message: String,
  to: User!,
  sentBy: User!
  sendAt: Date,
}